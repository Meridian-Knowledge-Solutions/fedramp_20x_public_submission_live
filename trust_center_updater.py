"""
Trust Center Finalizer & Style Enhancer
This script reverts the JavaScript to fetch dates from the canonical JSON source
and injects professional styling for form elements and buttons for a better user experience.
"""

import re
from pathlib import Path
import shutil

def backup_file(filepath):
    """Create a backup of the original file to prevent data loss."""
    backup_path = f"{filepath}.backup.{Path(filepath).stat().st_mtime_ns}"
    shutil.copy2(filepath, backup_path)
    print(f"‚úÖ Backup created: {backup_path}")
    return backup_path

def finalize_trust_center():
    """Applies final JavaScript corrections and visual enhancements to index.html."""
    html_file = Path("index.html")

    if not html_file.exists():
        print(f"‚ùå Error: {html_file} not found. Please run this script in the correct directory.")
        return False

    print("üöÄ Starting Trust Center finalization process...")
    backup_file(html_file)

    try:
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()

        # --- 1. Correct the JavaScript to fetch from JSON ---
        print("üîÑ Restoring JavaScript to fetch dates from JSON...")

        # This is the correct function that reads the file generated by the Python script.
        correct_js_function = r'''async function loadQuarterlyReportData() {
    try {
        // Load the next report dates from the JSON file created by the Python script
        const response = await fetch('./trust_center/next_report_date.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        // Update the display elements using the data from the file
        if (data.next_ongoing_report) {
            const reportDate = new Date(data.next_ongoing_report + 'T00:00:00Z'); // Assume UTC midnight
            document.getElementById('next-report-date').textContent =
                reportDate.toLocaleDateString('en-US', {
                    year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC'
                });
        }

        if (data.next_quarterly_review) {
            document.getElementById('next-quarterly-review').textContent = data.next_quarterly_review + ' at 2:00 PM ET';
        }

        // Update current quarter display
        const now = new Date();
        const quarter = Math.floor((now.getMonth() + 3) / 3);
        const year = now.getFullYear();
        document.getElementById('current-quarter-report').textContent =
            `Q${quarter} ${year} - Available`;

    } catch (error) {
        console.error('Could not load quarterly report schedule from JSON:', error);
        document.getElementById('next-report-date').textContent = 'Check back soon';
        document.getElementById('next-quarterly-review').textContent = 'Schedule pending';
    }
}'''

        # Use a flexible regex to find and replace the entire function block
        js_pattern = re.compile(r"async function loadQuarterlyReportData\(\) \{.*?\n\}", re.DOTALL)
        if js_pattern.search(html_content):
            html_content = js_pattern.sub(correct_js_function, html_content)
            print("‚úÖ JavaScript date logic has been corrected.")
        else:
            print("‚ö†Ô∏è Warning: Could not find the loadQuarterlyReportData function to replace.")


        # --- 2. Inject CSS for Visual Quality-of-Life Improvements ---
        print("üé® Injecting professional styles for forms and buttons...")

        # Professional styles for form elements and buttons
        visual_enhancement_css = r'''
/* --- Injected QoL Visual Styles for Trust Center --- */
.trust-section form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
}

.trust-section .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.25rem;
}

.trust-section .form-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.trust-section label {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.875rem;
}

.trust-section input[type="text"],
.trust-section input[type="email"],
.trust-section select,
.trust-section textarea {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--radius-sm);
    background-color: var(--bg-secondary);
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.2s ease-in-out;
    box-shadow: var(--shadow-sm);
}

.trust-section input[type="text"]:focus,
.trust-section input[type="email"]:focus,
.trust-section select:focus,
.trust-section textarea:focus {
    outline: none;
    border-color: var(--primary-500);
    box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.2);
}

.trust-section .checkbox-field {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.875rem;
}
.trust-section input[type="checkbox"] {
    width: 1.25em;
    height: 1.25em;
    accent-color: var(--primary-500);
}

.trust-section .form-submit-btn {
    background: var(--gradient-enhancement);
    color: white;
    font-weight: 700;
    font-size: 1rem;
    border: none;
    padding: 0.875rem 1.5rem;
    border-radius: var(--radius-sm);
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: var(--shadow);
    align-self: flex-start; /* Prevent button from stretching full-width */
}

.trust-section .form-submit-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}
'''
        # Find the closing style tag and inject the CSS before it
        css_injection_pattern = re.compile(r"(\s*</style>)", re.DOTALL)
        if css_injection_pattern.search(html_content):
            html_content = css_injection_pattern.sub(visual_enhancement_css + r'\1', html_content)
            print("‚úÖ New CSS for form styling has been successfully injected.")
        else:
            print("‚ö†Ô∏è Warning: Could not find closing </style> tag to inject CSS.")

        # --- 3. Update HTML form for better structure and styling ---
        print("üèóÔ∏è Restructuring form HTML for improved layout...")

        original_form_html = r'''<form id="federal-access-form" style="max-width: 600px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div>
                            <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">Federal Agency *</label>
                            <input type="text" name="agency" required style="width: 100%; padding: 12px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary);">
                        </div>
                        <div>
                            <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">Authorizing Official *</label>
                            <input type="text" name="ao_name" required style="width: 100%; padding: 12px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary);">
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">Official Email (.gov/.mil) *</label>
                        <input type="email" name="email" required style="width: 100%; padding: 12px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary);">
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">Access Type *</label>
                        <select name="access_type" required style="width: 100%; padding: 12px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary);">
                            <option value="">Select access type...</option>
                            <option value="full_package">Complete Authorization Package</option>
                            <option value="api_credentials">API Access Credentials</option>
                            <option value="monitoring_data">Continuous Monitoring Reports</option>
                            <option value="poam_access">Enhanced POA&M Analysis</option>
                        </select>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">Business Justification *</label>
                        <textarea name="justification" required rows="4" style="width: 100%; padding: 12px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary);"></textarea>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: flex; align-items: flex-start; color: var(--text-primary);">
                            <input type="checkbox" name="certification" required style="margin-right: 10px; margin-top: 3px;">
                            I certify that I am an authorized federal government representative.
                        </label>
                    </div>
                    
                    <button type="submit" style="background: var(--gradient-accent); color: white; border: none; padding: 15px 30px; border-radius: 10px; font-weight: 600; cursor: pointer; box-shadow: var(--shadow-sm);">
                        Submit Federal Access Request
                    </button>
                </form>'''

        enhanced_form_html = r'''<form id="federal-access-form">
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="agency-input">Federal Agency *</label>
                            <input type="text" id="agency-input" name="agency" required>
                        </div>
                        <div class="form-field">
                            <label for="ao-name-input">Authorizing Official *</label>
                            <input type="text" id="ao-name-input" name="ao_name" required>
                        </div>
                    </div>
                    <div class="form-field">
                        <label for="email-input">Official Email (.gov/.mil) *</label>
                        <input type="email" id="email-input" name="email" required pattern=".+\.gov|.+\.mil">
                    </div>
                    <div class="form-field">
                        <label for="access-type-select">Access Type *</label>
                        <select id="access-type-select" name="access_type" required>
                            <option value="">Select access type...</option>
                            <option value="full_package">Complete Authorization Package</option>
                            <option value="api_credentials">API Access Credentials</option>
                            <option value="monitoring_data">Continuous Monitoring Reports</option>
                            <option value="poam_access">Enhanced POA&M Analysis</option>
                        </select>
                    </div>
                    <div class="form-field">
                        <label for="justification-textarea">Business Justification *</label>
                        <textarea id="justification-textarea" name="justification" required rows="4"></textarea>
                    </div>
                    <div class="checkbox-field">
                        <input type="checkbox" id="certification-checkbox" name="certification" required>
                        <label for="certification-checkbox">I certify that I am an authorized federal government representative.</label>
                    </div>
                    <button type="submit" class="form-submit-btn">Submit Federal Access Request</button>
                </form>'''

        if original_form_html in html_content:
            html_content = html_content.replace(original_form_html, enhanced_form_html)
            print("‚úÖ HTML form has been updated with new structure and styles.")
        else:
             print("‚ö†Ô∏è Warning: Could not find the original form HTML to replace.")


        # --- 4. Write all changes back to the file ---
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)

        print("\nüéâ Trust Center finalization complete!")
        print("   - JavaScript is now correctly fetching authoritative dates.")
        print("   - Form elements and buttons are now professionally styled.")
        print("   - The original file has been backed up for safety.")
        return True

    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")
        return False

if __name__ == "__main__":
    finalize_trust_center()
