{
  "_comment": [
    "============================================================================",
    "RETIRED KSIs - No CLI commands needed (handled by superseding KSIs)",
    "KSI-MLA-04: Superseded by KSI-MLA-03",
    "KSI-MLA-06: Superseded by KSI-MLA-03",
    "KSI-TPR-02: Superseded by KSI-TPR-01",
    "============================================================================"
  ],
  "KSI-CNA-01": {
    "description": "Configure ALL information resources to limit inbound and outbound traffic",
    "justification": "Validates comprehensive traffic controls across all AWS resources through multi-layered network security including ingress/egress controls, application-layer protection, and traffic monitoring",
    "cli_commands": [
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Analyze security groups for comprehensive ingress AND egress traffic controls"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Check Network ACLs for subnet-level traffic filtering (defense in depth)"
      },
      {
        "command": "aws ec2 describe-route-tables --output json",
        "note": "Validate route tables for controlled traffic routing and egress paths"
      },
      {
        "command": "aws ec2 describe-nat-gateways --output json",
        "note": "Check NAT Gateways for controlled egress traffic from private subnets"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Validate VPC endpoints for private service access (avoiding internet routing)"
      },
      {
        "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
        "note": "Check WAF for application-layer traffic filtering and protection"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Analyze load balancers for traffic distribution and control capabilities"
      },
      {
        "command": "aws logs describe-log-groups --log-group-name-prefix '/aws/vpc/flowlogs' --output json",
        "note": "Check VPC Flow Logs for traffic monitoring and analysis capabilities"
      }
    ]
  },
  "KSI-CNA-02": {
    "description": "Design systems to minimize the attack surface and minimize lateral movement if compromised",
    "justification": "Validates comprehensive attack surface reduction through network segmentation, workload isolation, service minimization, and lateral movement prevention across traditional and modern cloud-native architectures",
    "cli_commands": [
      {
        "command": "aws ec2 describe-subnets --output json",
        "note": "Analyze subnet segmentation for attack surface isolation (public vs private)"
      },
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Evaluate micro-segmentation and lateral movement prevention through security group rules"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Assess compute workload exposure and placement for attack surface minimization"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Check Network ACLs for subnet-level isolation and lateral movement barriers"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Analyze load balancer exposure patterns (internal vs internet-facing)"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Assess Lambda function isolation and VPC configuration for attack surface reduction"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check database placement and exposure (should be in private subnets)"
      },
      {
        "command": "aws ecs describe-services --output json",
        "note": "Check containerized services for attack surface minimization"
      },
      {
        "command": "aws ec2 describe-network-interfaces --output json",
        "note": "Analyze network interfaces for micro-segmentation and controlled communications"
      },
      {
        "command": "aws iam list-roles --output json",
        "note": "Check IAM roles for least privilege and attack surface reduction"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate managed instances for centralized security posture and reduced attack surface"
      }
    ]
  },
  "KSI-CNA-03": {
    "description": "Use logical networking and related capabilities to enforce traffic flow controls",
    "justification": "Validates logical networking implementation through VPC design, subnet segmentation, routing controls, and network security enforcement",
    "cli_commands": [
      {
        "command": "aws ec2 describe-vpcs --output json",
        "note": "Check VPC configuration for logical network isolation and traffic control foundation"
      },
      {
        "command": "aws ec2 describe-subnets --output json",
        "note": "Validate subnet design for logical segmentation and traffic isolation"
      },
      {
        "command": "aws ec2 describe-route-tables --output json",
        "note": "Analyze routing tables for traffic flow control and network segmentation"
      },
      {
        "command": "aws ec2 describe-internet-gateways --output json",
        "note": "Check internet gateways for controlled external connectivity"
      },
      {
        "command": "aws ec2 describe-nat-gateways --output json",
        "note": "Validate NAT gateways for controlled outbound traffic from private networks"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check VPC endpoints for secure service communications without internet transit"
      },
      {
        "command": "aws directconnect describe-connections --output json",
        "note": "Validate dedicated connections for enterprise traffic flow controls"
      },
      {
        "command": "aws ec2 describe-transit-gateways --output json",
        "note": "Check transit gateways for inter-VPC and hybrid traffic control"
      }
    ]
  },
  "KSI-CNA-04": {
    "description": "Use immutable infrastructure with strictly defined functionality and privileges by default",
    "justification": "Validates immutable infrastructure patterns through Infrastructure as Code, container usage, serverless adoption, and configuration management",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Check CloudFormation stacks for Infrastructure as Code immutable deployment patterns"
      },
      {
        "command": "aws ec2 describe-launch-templates --output json",
        "note": "Validate launch templates for consistent immutable instance deployment"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Check Auto Scaling Groups for immutable instance replacement patterns"
      },
      {
        "command": "aws ecs describe-clusters --output json",
        "note": "Validate containerized infrastructure for immutable deployment patterns"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check serverless functions as immutable compute resources"
      },
      {
        "command": "aws ec2 describe-images --owners self --output json",
        "note": "Validate custom AMIs for immutable image-based deployments"
      },
      {
        "command": "aws ssm describe-documents --document-filter-list key=DocumentType,value=Command --output json",
        "note": "Check Systems Manager documents for immutable configuration management"
      }
    ]
  },
  "KSI-CNA-05": {
    "description": "Have denial of service protection",
    "justification": "Validates comprehensive DDoS protection through AWS Shield, CloudFront, WAF, load balancers, and monitoring systems for traffic-based attacks",
    "cli_commands": [
      {
        "command": "aws shield describe-subscription --output json",
        "note": "Check AWS Shield subscription status for DDoS protection coverage"
      },
      {
        "command": "aws cloudfront list-distributions --output json",
        "note": "Validate CloudFront distributions for DDoS mitigation and global edge protection"
      },
      {
        "command": "aws wafv2 list-web-acls --scope CLOUDFRONT --output json",
        "note": "Check CloudFront WAF rules for application-layer DDoS protection"
      },
      {
        "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
        "note": "Validate regional WAF rules for regional DDoS protection"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancers for traffic distribution and DDoS mitigation capabilities"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Validate Auto Scaling Groups for capacity-based DDoS mitigation"
      },
      {
        "command": "aws route53 list-hosted-zones --output json",
        "note": "Check Route 53 for DNS-layer protection and traffic routing capabilities"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Verify CloudWatch alarms for DDoS detection and automated response"
      }
    ]
  },
  "KSI-CNA-06": {
    "description": "Design systems for high availability and rapid recovery",
    "justification": "Validates comprehensive high availability through multi-AZ deployments, redundant infrastructure, automated failover, backup strategies, and disaster recovery capabilities across all service layers",
    "cli_commands": [
      {
        "command": "aws ec2 describe-subnets --output json",
        "note": "Analyze subnet distribution across availability zones for network-level HA"
      },
      {
        "command": "aws ec2 describe-availability-zones --output json",
        "note": "Check available AZs in region for HA planning and validation"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Validate RDS Multi-AZ deployments and database high availability"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancers for application-layer HA and traffic distribution"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Validate Auto Scaling Groups for compute resilience and multi-AZ distribution"
      },
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Check backup plans for data protection and recovery capabilities"
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --output json",
        "note": "Validate EBS snapshot strategy for storage recovery"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Check S3 buckets for storage redundancy and cross-region replication"
      },
      {
        "command": "aws route53 list-hosted-zones --output json",
        "note": "Validate DNS redundancy and health check capabilities"
      }
    ]
  },
  "KSI-CNA-07": {
    "description": "Ensure cloud-native information resources are implemented based on host provider's best practices and documented guidance",
    "justification": "Validates comprehensive adherence to AWS best practices through Well-Architected principles, service configurations, security recommendations, and operational excellence",
    "cli_commands": [
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Check Config rules for best practice compliance and continuous governance"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate CloudTrail configuration following AWS security best practices"
      },
      {
        "command": "aws iam get-account-summary --output json",
        "note": "Check IAM configuration against AWS security best practices"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate S3 configurations following AWS best practices for data protection"
      },
      {
        "command": "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceType,State.Name]' --output json",
        "note": "Check instance types and configurations against AWS best practices"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate monitoring and alerting following AWS operational best practices"
      },
      {
        "command": "aws support describe-trusted-advisor-checks --language en --output json",
        "note": "Check Trusted Advisor recommendations for AWS best practice adherence"
      },
      {
        "command": "aws wellarchitected list-workloads --output json",
        "note": "Validate Well-Architected Framework implementation and best practice reviews"
      },
      {
        "command": "aws servicecatalog list-portfolios --output json",
        "note": "Check Service Catalog for standardized best practice deployments"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate Systems Manager configuration for operational best practices"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Check Inspector configuration for security best practice scanning"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide best practice governance and organizational standards"
      }
    ]
  },
  "KSI-SVC-01": {
    "description": "Harden and review network and system configurations",
    "justification": "Validates comprehensive system hardening from basic network security to enterprise-grade multi-layer defense, covering security groups, system configurations, automated compliance, threat detection, and organizational governance with patch management and vulnerability scanning",
    "cli_commands": [
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Analyze security groups for network hardening and restrictive access controls"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Check instance configurations for system hardening and security posture"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate Systems Manager agent coverage for centralized configuration management"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Check patch baselines for automated system hardening and vulnerability management"
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Validate Config rules for automated configuration compliance and hardening"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Check Network ACLs for subnet-level network hardening and traffic control"
      },
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Validate GuardDuty for threat detection and security monitoring"
      },
      {
        "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
        "note": "Check WAF for application-layer protection and attack mitigation"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Validate Inspector for vulnerability assessment and security hardening"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide hardening policies and organizational security governance"
      }
    ]
  },
  "KSI-SVC-02": {
    "description": "Encrypt or secure network traffic",
    "justification": "Validates comprehensive network traffic encryption from basic HTTPS enforcement to enterprise-grade multi-protocol encryption, covering load balancers, CDN, APIs, databases, caching, VPN, and organizational encryption policies with certificate management",
    "cli_commands": [
      {
        "command": "aws acm list-certificates --output json",
        "note": "Check SSL/TLS certificates for encrypted network communications and certificate management"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Validate VPC endpoints for private AWS service communication and traffic isolation"
      },
      {
        "command": "aws elbv2 describe-listeners --output json",
        "note": "Analyze load balancer listeners for HTTPS/TLS protocol enforcement and cipher configuration"
      },
      {
        "command": "aws cloudfront list-distributions --output json",
        "note": "Check CloudFront CDN distributions for HTTPS enforcement and global traffic encryption"
      },
      {
        "command": "aws apigateway get-rest-apis --output json",
        "note": "Validate API Gateway configurations for API traffic encryption and secure endpoint access"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS database instances for SSL/TLS connection encryption and secure data transit"
      },
      {
        "command": "aws elasticache describe-cache-clusters --output json",
        "note": "Analyze ElastiCache clusters for in-transit encryption and secure cache communication"
      },
      {
        "command": "aws acm list-certificates --output json",
        "note": "Check AWS Certificate Manager for automated TLS certificate provisioning and management"
      },
      {
        "command": "aws ec2 describe-vpn-connections --output json",
        "note": "Validate VPN connections for encrypted hybrid cloud connectivity and secure site-to-site communication"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide encryption policies and organizational traffic security standards across accounts"
      }
    ]
  },
  "KSI-SVC-03": {
    "description": "Encrypt all federal and sensitive information at rest",
    "justification": "Validates comprehensive at-rest encryption from basic storage service availability to enterprise-grade multi-service encryption, covering object storage, block storage, databases, data lakes, backup systems, and managed services with automated key management and compliance monitoring",
    "cli_commands": [
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Get S3 buckets for object storage encryption validation and federal data protection"
      },
      {
        "command": "aws ec2 describe-volumes --output json",
        "note": "Check EBS volume encryption status for block storage and instance data protection"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Validate RDS database encryption for structured data at rest and backup encryption"
      },
      {
        "command": "aws rds describe-db-snapshots --owner-type self --output json",
        "note": "Check RDS snapshot encryption for database backup and recovery data protection"
      },
      {
        "command": "aws efs describe-file-systems --output json",
        "note": "Check Elastic File System encryption for shared storage and distributed application data"
      },
      {
        "command": "aws backup list-backup-vaults --output json",
        "note": "Validate AWS Backup vault encryption for centralized backup data protection and compliance"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Check KMS key management for enterprise encryption key governance and automated key rotation"
      }
    ]
  },
  "KSI-SVC-04": {
    "description": "Manage configuration centrally",
    "justification": "Validates comprehensive centralized configuration management from basic service availability to enterprise-grade configuration governance, covering parameter management, configuration compliance, automation, templates, secrets management, and organizational policy enforcement with version control and audit capabilities",
    "cli_commands": [
      {
        "command": "aws ssm describe-parameters --output json",
        "note": "Check Systems Manager Parameter Store for centralized configuration management and application settings"
      },
      {
        "command": "aws config describe-configuration-recorders --output json",
        "note": "Validate AWS Config for configuration compliance monitoring and change tracking"
      },
      {
        "command": "aws ssm list-documents --document-filter-list key=DocumentType,value=Command --output json",
        "note": "Check Systems Manager documents for configuration management workflows and deployment automation"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Validate CloudFormation for Infrastructure as Code configuration management and template-based deployment"
      },
      {
        "command": "aws secretsmanager list-secrets --output json",
        "note": "Check Secrets Manager for centralized secrets and sensitive configuration management"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Analyze patch baselines for centralized system configuration management and compliance standards"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Check Config rules for automated configuration compliance validation and policy enforcement"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate Systems Manager agent coverage for centralized instance configuration management"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Check Service Catalog for standardized configuration templates and governed deployment patterns"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide configuration policies and organizational governance standards across accounts"
      }
    ]
  },
  "KSI-SVC-05": {
    "description": "Continuously verify information resource integrity",
    "justification": "Validates comprehensive cryptographic integrity enforcement from basic audit trail validation to enterprise-grade multi-layer integrity protection, covering log validation, key management, code signing, database integrity, backup verification, and organizational integrity governance with automated monitoring and compliance",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail log file validation for audit trail integrity and tamper-evident logging"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Validate KMS keys available for cryptographic integrity protection and key-based verification"
      },
      {
        "command": "aws kms list-aliases --output json",
        "note": "Check KMS key aliases and management for cryptographic key governance and integrity protection"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Analyze S3 bucket configurations for object integrity verification and versioning protection"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS database instances for backup encryption and transaction log integrity protection"
      },
      {
        "command": "aws config describe-configuration-recorders --output json",
        "note": "Validate AWS Config for configuration change integrity tracking and compliance monitoring"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for integrity violation detection and automated response triggers"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Validate SNS topics for integrity event notification and stakeholder alerting workflows"
      },
      {
        "command": "aws backup list-backup-vaults --output json",
        "note": "Check AWS Backup vaults for backup integrity verification and cryptographic protection"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide integrity policies and organizational cryptographic governance standards across accounts"
      }
    ]
  },
  "KSI-SVC-06": {
    "description": "Use automated key management systems to manage, protect, and regularly rotate digital keys and certificates",
    "justification": "Validates comprehensive automated key management from basic KMS availability to enterprise-grade key lifecycle management, covering encryption keys, certificates, rotation policies, access controls, hardware security modules, and organizational key governance with automated provisioning and compliance monitoring",
    "cli_commands": [
      {
        "command": "aws kms list-keys --output json",
        "note": "Check KMS keys for automated key management and cryptographic service availability"
      },
      {
        "command": "aws acm list-certificates --output json",
        "note": "Validate ACM certificates for automated certificate lifecycle management and SSL/TLS provisioning"
      },
      {
        "command": "aws kms list-aliases --output json",
        "note": "Analyze KMS key aliases for key management governance and organizational naming standards"
      },
      {
        "command": "aws ssm describe-parameters --parameter-filters Key=Type,Values=SecureString --output json",
        "note": "Check Systems Manager SecureString parameters for KMS-encrypted configuration management"
      },
      {
        "command": "aws secretsmanager list-secrets --output json",
        "note": "Validate Secrets Manager for automated secrets rotation and centralized credential management"
      },
      {
        "command": "aws iam list-server-certificates --output json",
        "note": "Check IAM server certificates for legacy certificate management and migration tracking"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Analyze CloudFormation stacks for Infrastructure as Code key management and automated provisioning"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Check Config rules for key management compliance monitoring and policy enforcement"
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=CreateKey --start-time 2025-05-01 --output json",
        "note": "Validate key management audit trail for creation, rotation, and access tracking"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide key management policies and organizational governance standards across accounts"
      }
    ]
  },
  "KSI-SVC-07": {
    "description": "Use a consistent, risk-informed approach for applying security patches",
    "justification": "Validates comprehensive risk-informed patch management from basic patch baseline configuration to enterprise-grade vulnerability-driven patching, covering automated deployment, compliance monitoring, container patching, lambda layer management, and organizational patch governance with risk assessment and testing workflows",
    "cli_commands": [
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Check patch baselines for consistent patching approach and vulnerability management standards"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate SSM agent coverage for automated patching and centralized system management"
      },
      {
        "command": "aws ssm describe-patch-groups --output json",
        "note": "Analyze patch groups for risk-informed patching segmentation and deployment scheduling"
      },
      {
        "command": "aws ssm list-documents --document-filter-list key=DocumentType,value=Command --output json",
        "note": "Check SSM documents for patch automation workflows and risk-informed deployment procedures"
      },
      {
        "command": "aws ssm describe-maintenance-windows --output json",
        "note": "Validate maintenance windows for controlled patch deployment and risk mitigation scheduling"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Check Inspector for vulnerability-driven patch prioritization and risk assessment automation"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Analyze container registries for container image patching and vulnerability scanning integration"
      },
      {
        "command": "aws lambda list-layers --output json",
        "note": "Check Lambda layers for serverless runtime patching and dependency management"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Validate Config rules for patch compliance monitoring and governance automation"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide patch management policies and organizational risk-informed patching standards across accounts"
      }
    ]
  },
  "KSI-SVC-08": {
    "description": "Ensure that changes do not introduce or leave behind residual elements that could negatively affect confidentiality, integrity, or availability",
    "justification": "Validates comprehensive change residual element management through Infrastructure as Code, automated cleanup processes, resource lifecycle management, and change impact tracking covering CloudFormation deployment, automated resource management, and residual element detection",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --output json",
        "note": "Validate Infrastructure as Code for residual element management and clean deployments"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check automated cleanup and residual element management functions"
      },
      {
        "command": "aws config describe-configuration-recorders --output json",
        "note": "Validate change impact tracking and configuration management"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Check EventBridge rules for automated lifecycle and cleanup workflows"
      },
      {
        "command": "evidence_check",
        "note": "Change management procedures, cleanup processes, and residual element detection documentation"
      }
    ]
  },
  "KSI-SVC-09": {
    "description": "Use mechanisms that continuously validate the authenticity and integrity of communications between information resources",
    "justification": "Validates continuous communication integrity through comprehensive certificate management, encryption validation, inter-service security, and automated integrity checking covering ACM certificates, TLS configuration, VPC security, and cryptographic validation mechanisms",
    "cli_commands": [
      {
        "command": "aws acm list-certificates --output json",
        "note": "Validate TLS certificate management for communication authenticity and integrity"
      },
      {
        "command": "aws elbv2 describe-ssl-policies --output json",
        "note": "Check SSL/TLS policies for secure communication configuration"
      },
      {
        "command": "aws elbv2 describe-listeners --output json",
        "note": "Validate load balancer listeners for encrypted communication enforcement"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check VPC endpoints for private and secure inter-service communication"
      },
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,StorageEncrypted]' --output json",
        "note": "Validate database encryption for data communication integrity"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Check cryptographic infrastructure for communication integrity validation"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate continuous monitoring of certificate and communication integrity"
      }
    ]
  },
  "KSI-SVC-10": {
    "description": "Remove unwanted information promptly, including from backups if appropriate",
    "justification": "Validates automated data lifecycle management through comprehensive retention policies, backup purging automation, storage lifecycle management, and compliance-driven deletion covering AWS Backup lifecycle, S3 policies, automated purging, and data retention compliance",
    "cli_commands": [
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validate backup lifecycle management and automated retention policies"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Check S3 storage lifecycle automation and data retention management"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check automated data purging and lifecycle management functions"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Validate scheduled data lifecycle and automated cleanup workflows"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Check log retention policies for compliance-driven data deletion"
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --output json",
        "note": "Validate EBS snapshot lifecycle management and automated cleanup"
      },
      {
        "command": "evidence_check",
        "note": "Data lifecycle management policies, retention schedules, and purging procedures documentation"
      }
    ]
  },
  "KSI-IAM-01": {
    "description": "Enforce multi-factor authentication (MFA) using methods that are difficult to intercept or impersonate (phishing-resistant MFA) for all user authentication",
    "justification": "Validates MFA enforcement through Identity Center configuration evidence showing always-on MFA requirements, combined with traditional IAM user analysis",
    "cli_commands": [
      {
        "command": "aws iam list-users --output json",
        "note": "Get traditional IAM users for MFA analysis"
      },
      {
        "command": "aws iam list-mfa-devices --output json",
        "note": "Check traditional IAM MFA devices"
      },
      {
        "command": "aws sso-admin list-instances --output json",
        "note": "Get Identity Center instances"
      },
      {
        "command": "aws identitystore list-users --identity-store-id d-9067ccc0ff --output json",
        "note": "Get Identity Center users for accurate user count"
      }
    ]
  },
  "KSI-IAM-02": {
    "description": "Use secure passwordless methods for user authentication and authorization when feasible, otherwise enforce strong passwords with MFA",
    "justification": "Validates passwordless authentication (SSO/SAML/temporary credentials) where feasible, otherwise strong password policy with mandatory MFA enforcement",
    "cli_commands": [
      {
        "command": "aws iam list-saml-providers --output json",
        "note": "Check for federated authentication (passwordless method)"
      },
      {
        "command": "aws iam list-virtual-mfa-devices --output json",
        "note": "Validate MFA device configuration and enforcement"
      },
      {
        "command": "aws iam get-account-password-policy --output json",
        "note": "Check strong password policy enforcement when passwords are used"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Analyze user authentication patterns and requirements"
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Validate current authentication method (temporary vs permanent credentials)"
      }
    ]
  },
  "KSI-IAM-03": {
    "description": "Enforce appropriately secure authentication methods for non-user accounts and services",
    "justification": "Validates service accounts use appropriate authentication methods (roles, not long-term keys) and detects insecure patterns",
    "cli_commands": [
      {
        "command": "aws iam list-roles --output json",
        "note": "Check IAM roles for service authentication (primary secure method)"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Identify potential service users who should be using roles instead"
      },
      {
        "command": "aws iam list-access-keys --output json",
        "note": "Detect long-term access keys that may indicate insecure service authentication"
      },
      {
        "command": "aws ec2 describe-instances --query 'Reservations[*].Instances[*].IamInstanceProfile' --output json",
        "note": "Validate EC2 instances use instance profiles for secure service authentication"
      }
    ]
  },
  "KSI-IAM-04": {
    "description": "Use a least-privileged, role and attribute-based, and just-in-time security authorization model for all user and non-user accounts and services",
    "justification": "Validates comprehensive authorization through IAM Identity Center permission sets (modern approach) and traditional IAM patterns for complete coverage of least privilege, role-based, attribute-based, and just-in-time access",
    "cli_commands": [
      {
        "command": "aws sso-admin list-instances --output json",
        "note": "Check for AWS IAM Identity Center (modern permission set approach)"
      },
      {
        "command": "INSTANCE_ARN=$(aws sso-admin list-instances --query 'Instances[0].InstanceArn' --output text 2>/dev/null) && aws sso-admin list-permission-sets --instance-arn \"$INSTANCE_ARN\" --output json 2>/dev/null || echo '{\"PermissionSets\":[]}'",
        "note": "ROBUST: Get instance ARN first, then list permission sets with proper error handling"
      },
      {
        "command": "aws iam list-roles --output json",
        "note": "Analyze traditional IAM roles for service accounts and legacy access patterns"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Check if users have direct policy attachments (anti-pattern for least privilege)"
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Validate current session type (permission set session vs traditional credentials)"
      },
      {
        "command": "aws iam get-account-summary --output json",
        "note": "Get account-wide IAM usage patterns for authorization model assessment"
      }
    ]
  },
  "KSI-IAM-05": {
    "description": "Apply zero trust design principles",
    "justification": "Validates comprehensive zero trust implementation through Identity Center (modern approach), federated MFA detection (consistent with IAM-01), network security, continuous monitoring, conditional access, and secure communications patterns",
    "cli_commands": [
      {
        "command": "aws sso-admin list-instances --output json",
        "note": "Check IAM Identity Center for modern zero trust user access patterns"
      },
      {
        "command": "aws identitystore list-users --identity-store-id $(aws sso-admin list-instances --query 'Instances[0].IdentityStoreId' --output text) --output json 2>/dev/null || echo '{\"Users\":[]}'",
        "note": "List Identity Center users to detect federated MFA enforcement patterns (external IdP integration via SCIM/Okta)"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate continuous monitoring and verification logging (must be active)"
      },
      {
        "command": "aws cloudtrail get-trail-status --name arn:aws:cloudtrail:us-east-1:155765116562:trail/meridianks-Management-events --output json",
        "note": "Verify CloudTrail is actively logging (zero trust requires continuous monitoring)"
      },
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Analyze network micro-segmentation and least privilege network access"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Validate secure private communications (VPC endpoints for AWS services)"
      },
      {
        "command": "aws iam list-virtual-mfa-devices --output json",
        "note": "Check traditional IAM MFA devices (fallback for non-federated scenarios)"
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Validate current session type (temporary credentials indicate zero trust access)"
      }
    ]
  },
  "KSI-IAM-06": {
    "description": "Automatically disable or otherwise secure accounts with privileged access in response to suspicious activity",
    "justification": "Validates end-to-end automated response workflows including threat detection, event triggers, and account security actions through modern AWS security services and Identity Center integration",
    "cli_commands": [
      {
        "command": "aws events list-rules --output json",
        "note": "Check EventBridge rules for automated security response triggers (critical for automation)"
      },
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Validate GuardDuty threat detection service for suspicious activity identification"
      },
      {
        "command": "aws securityhub describe-hub --output json",
        "note": "Check Security Hub for centralized security findings and automated response coordination"
      },
      {
        "command": "aws sso-admin list-instances --output json",
        "note": "Validate Identity Center for built-in automated session and access controls"
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Check Config rules for automated compliance monitoring and remediation triggers"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate Lambda functions for automated security response and account management workflows"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Check SNS topics for security incident notification and alert distribution"
      },
      {
        "command": "aws config describe-remediation-configurations --config-rule-names $(aws configservice describe-config-rules --query 'ConfigRules[0:5].ConfigRuleName' --output text 2>/dev/null || echo 'none') --output json 2>/dev/null || echo '{\"RemediationConfigurations\": []}'",
        "note": "Check Config remediation for automated account security and compliance enforcement"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Identify automated response functions for account disabling and security actions"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for suspicious privileged account activity monitoring"
      }
    ]
  },
  "KSI-IAM-07": {
    "description": "Securely manage the lifecycle and privileges of all accounts, roles, and groups",
    "justification": "Validates comprehensive account lifecycle management through automated IAM analysis covering service-oriented architecture, active lifecycle management, privilege automation, provisioning processes, and access review mechanisms with enterprise identity management integration",
    "cli_commands": [
      {
        "command": "aws iam list-roles --output json",
        "note": "Analyze IAM roles for service-oriented architecture and lifecycle management patterns"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Analyze user accounts for lifecycle management and privilege patterns"
      },
      {
        "command": "aws iam list-policies --scope Local --output json",
        "note": "Check custom policies for privilege management and access control automation"
      },
      {
        "command": "aws sso list-accounts --output json",
        "note": "Validate AWS SSO/Identity Center for advanced account lifecycle management"
      }
    ]
  },
  "KSI-MLA-01": {
    "description": "Operate a Security Information and Event Management (SIEM) or similar system(s) for centralized, tamper-resistant logging of events, activities, and changes",
    "justification": "Validates comprehensive SIEM capabilities from basic centralized logging to enterprise-grade log management, analysis, and compliance",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail for centralized, tamper-resistant logging foundation"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Validate centralized log collection and retention policies in CloudWatch"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check automated log analysis and real-time alerting capabilities"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Validate cryptographic protection and encryption for sensitive logs"
      },
      {
        "command": "aws config describe-delivery-channels --output json",
        "note": "Check compliance-grade log delivery and audit trail mechanisms"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate log archival, long-term storage, and forensic capabilities"
      },
      {
        "command": "aws securityhub get-findings --max-results 20 --output json",
        "note": "Check advanced threat detection and security event correlation"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide centralized logging and cross-account capabilities"
      }
    ]
  },
  "KSI-MLA-02": {
    "description": "Regularly review and audit logs",
    "justification": "Validates comprehensive log review capabilities from basic notification-driven processes to enterprise-grade automated analysis, compliance governance, and cross-account log review",
    "cli_commands": [
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for automated log review and real-time monitoring"
      },
      {
        "command": "aws logs describe-metric-filters --output json",
        "note": "Validate metric filters for log pattern analysis and security event detection"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Check SNS topics for log review notifications and alert delivery mechanisms"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Analyze log retention policies, encryption, and compliance-grade log management"
      },
      {
        "command": "aws cloudtrail lookup-events --max-items 10 --output json",
        "note": "Check recent audit events for manual and automated review process validation"
      },
      {
        "command": "aws securityhub get-insights --output json",
        "note": "Validate advanced log correlation, security analytics, and threat intelligence"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Check automated compliance rules for log governance and audit trail validation"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate custom log processing, automated review functions, and intelligent analysis"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide centralized log review and cross-account analysis capabilities"
      }
    ]
  },
  "KSI-MLA-03": {
    "description": "Rapidly detect and remediate or mitigate vulnerabilities",
    "justification": "Validates comprehensive vulnerability detection and response from basic security monitoring to enterprise-grade automated remediation, threat intelligence, and cross-account vulnerability management",
    "cli_commands": [
      {
        "command": "aws securityhub get-enabled-standards --region us-east-1 --output json",
        "note": "Check Security Hub standards for foundational vulnerability detection and compliance monitoring"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Validate Inspector automated scanning for EC2, container, and application vulnerabilities"
      },
      {
        "command": "aws securityhub get-findings --filters '{\"RecordState\":[{\"Value\":\"ACTIVE\",\"Comparison\":\"EQUALS\"}]}' --max-results 50 --output json",
        "note": "Analyze active security findings for rapid vulnerability detection and response assessment"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Check automated patch management for rapid vulnerability remediation"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate automated response functions for vulnerability remediation and incident handling"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check real-time alerting for rapid vulnerability detection and notification"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Validate continuous compliance monitoring for configuration vulnerability detection"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide vulnerability management and cross-account detection capabilities"
      }
    ]
  },
  "KSI-MLA-04": {
    "description": "Perform authenticated vulnerability scanning on information resources",
    "justification": "Validates comprehensive authenticated vulnerability scanning from basic service availability to enterprise-grade multi-service scanning, container security, and cloud-native vulnerability management",
    "cli_commands": [
      {
        "command": "aws inspector2 list-coverage --output json",
        "note": "Check Inspector coverage for authenticated vulnerability scanning of EC2 and container resources"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Validate Inspector service enablement and scanning configuration status"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Analyze EC2 instances available for authenticated vulnerability scanning assessment"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Check container registries for authenticated container image vulnerability scanning"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate serverless functions for code vulnerability analysis and dependency scanning"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Check Systems Manager agent coverage for authenticated system-level scanning"
      },
      {
        "command": "aws securityhub get-findings --filters '{\"ProductName\":[{\"Value\":\"Inspector\",\"Comparison\":\"EQUALS\"}]}' --max-results 20 --output json",
        "note": "Analyze authenticated scanning results and vulnerability findings integration"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide authenticated vulnerability scanning and cross-account coverage"
      }
    ]
  },
  "KSI-MLA-05": {
    "description": "Perform Infrastructure as Code and configuration evaluation and testing",
    "justification": "Validates comprehensive Infrastructure as Code security evaluation from basic CloudFormation deployment to enterprise-grade multi-account governance, automated testing, and configuration compliance management",
    "cli_commands": [
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Check Config rules for Infrastructure as Code evaluation and configuration compliance monitoring"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Validate CloudFormation stacks for Infrastructure as Code configuration testing and deployment"
      },
      {
        "command": "aws cloudformation describe-stacks --output json",
        "note": "Analyze detailed stack configuration for drift detection and infrastructure validation"
      },
      {
        "command": "aws ssm describe-parameters --max-results 50 --output json",
        "note": "Check Systems Manager Parameter Store for centralized configuration management"
      },
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Validate automated Infrastructure as Code testing through build projects and validation pipelines"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Check for automated Infrastructure as Code deployment pipelines and change validation"
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=CreateStack --start-time 2025-05-01 --output json",
        "note": "Analyze deployment audit trail for Infrastructure as Code change tracking and compliance"
      },
      {
        "command": "aws resourcegroupstaggingapi get-resources --resource-type-filters cloudformation --output json",
        "note": "Check resource inventory and tag-based governance for Infrastructure as Code assets"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-level multi-account governance for Infrastructure as Code standardization"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Check standardized Infrastructure as Code templates and governance through Service Catalog"
      }
    ]
  },
  "KSI-MLA-06": {
    "description": "Centrally track and prioritize the mitigation and/or remediation of identified vulnerabilities",
    "justification": "Validates comprehensive centralized vulnerability tracking from basic findings collection to enterprise-grade vulnerability lifecycle management, covering automated prioritization, remediation workflows, compliance tracking, and cross-account vulnerability coordination with metrics and reporting",
    "cli_commands": [
      {
        "command": "aws securityhub get-findings --max-results 100 --output json",
        "note": "Check Security Hub for centralized vulnerability tracking and finding aggregation from multiple sources"
      },
      {
        "command": "aws inspector2 list-findings --max-results 50 --output json",
        "note": "Validate Inspector findings for vulnerability prioritization and severity-based tracking"
      },
      {
        "command": "aws ssm describe-patch-group-compliance --output json",
        "note": "Check patch compliance tracking for systematic vulnerability remediation and patch management"
      },
      {
        "command": "aws config get-compliance-summary-by-config-rule --output json",
        "note": "Validate Config rule compliance for configuration vulnerability tracking and governance"
      },
      {
        "command": "aws securityhub get-insights --output json",
        "note": "Check Security Hub insights for advanced vulnerability analytics and trend analysis"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate vulnerability alerting and automated response triggers for priority vulnerabilities"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check automated vulnerability management functions for remediation workflow automation"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Validate EventBridge rules for vulnerability lifecycle automation and workflow integration"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Check SNS topics for vulnerability notification workflows and stakeholder communication"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide vulnerability tracking and cross-account centralized management"
      }
    ]
  },
  "KSI-MLA-07": {
    "description": "Maintain a list of information resources and event types that will be monitored, logged, and audited",
    "justification": "Validates comprehensive monitoring inventory management through automated resource discovery, event categorization, audit trail coverage, and documentation maintenance covering log infrastructure, monitoring scope, and automated inventory systems",
    "cli_commands": [
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Inventory logging resources and analyze event categorization across AWS services"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate audit trail coverage and event monitoring scope"
      },
      {
        "command": "aws config describe-configuration-recorders --output json",
        "note": "Check automated discovery and continuous monitoring of information resources"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate active monitoring and alerting for tracked resources and events"
      },
      {
        "command": "evidence_check",
        "note": "Monitoring inventory documentation, resource lists, and event type categorization"
      }
    ]
  },
  "KSI-MLA-08": {
    "description": "Use a least-privileged, role and attribute-based, and just-in-time access authorization model for access to log data",
    "justification": "Validates advanced RBAC with JIT capabilities for log access through specialized role analysis, privilege management automation, attribute-based access control, and just-in-time access mechanisms covering log-specific permissions and granular access control",
    "cli_commands": [
      {
        "command": "aws iam list-roles --output json",
        "note": "Analyze roles for log-specific RBAC and least privilege access patterns"
      },
      {
        "command": "aws iam list-policies --scope Local --output json",
        "note": "Check custom policies for log-specific permissions and attribute-based access"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Analyze log resources for attribute-based access control patterns"
      },
      {
        "command": "aws sts assume-role --role-arn arn:aws:iam::ACCOUNT:role/LogAccessRole --role-session-name JITTest --output json",
        "note": "Test just-in-time access capability for log data access (replace ACCOUNT and role as needed)"
      }
    ]
  },
  "KSI-CMT-01": {
    "description": "Log and monitor system modifications",
    "justification": "Validates comprehensive system modification logging from basic change detection to enterprise-grade change tracking, covering CloudTrail audit, configuration monitoring, event automation, and organizational change governance with real-time alerting and compliance tracking",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail configuration for comprehensive system modification logging and audit trail"
      },
      {
        "command": "aws config describe-configuration-recorders --output json",
        "note": "Validate Config for configuration change recording and system modification tracking"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Check CloudWatch log groups for application and system change logging"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Validate EventBridge rules for real-time change monitoring and automated alerting"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for change detection and system modification alerting"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Validate SNS topics for change notification workflows and stakeholder communication"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for automated change response and modification tracking workflows"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate Systems Manager for instance-level change tracking and centralized modification monitoring"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide change logging policies and organizational modification governance"
      }
    ]
  },
  "KSI-CMT-02": {
    "description": "Execute changes through redeployment of version controlled immutable resources rather than direct modification wherever possible",
    "justification": "Validates comprehensive immutable deployment capabilities from pilot to enterprise maturity levels through CloudFormation, Launch Templates, containers, serverless, and governance",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE UPDATE_ROLLBACK_COMPLETE --output json",
        "note": "Check CloudFormation stacks for AWS-managed immutable infrastructure foundation"
      },
      {
        "command": "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,LaunchTime,ImageId,InstanceType]' --output json",
        "note": "Validate EC2 instances for immutable deployment patterns (Image-based vs direct modification)"
      },
      {
        "command": "aws ec2 describe-launch-templates --output json",
        "note": "Check launch templates for standardized immutable instance deployment"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Validate Auto Scaling Groups for immutable scaling and instance replacement patterns"
      },
      {
        "command": "aws ecs describe-services --output json",
        "note": "Check containerized services for immutable container deployment and rolling update patterns"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate serverless functions for immutable code deployment (function versioning)"
      },
      {
        "command": "aws codedeploy list-applications --output json",
        "note": "Check CodeDeploy applications for automated immutable deployment workflows"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Validate container registries for immutable container image management"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Check Service Catalog for standardized immutable resource templates and governance"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide immutable deployment policies and organizational governance standards"
      }
    ]
  },
  "KSI-CMT-03": {
    "description": "Implement automated testing and validation of changes prior to deployment",
    "justification": "Validates comprehensive automated testing from basic build validation to enterprise-grade multi-stage testing, covering unit tests, integration tests, security scanning, infrastructure validation, and deployment pipeline governance with quality gates and compliance checking",
    "cli_commands": [
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Check CodeBuild projects for automated testing and validation pipeline implementation"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Validate CodePipeline for multi-stage testing workflows and deployment gate enforcement"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for custom testing automation and validation workflows"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Validate EventBridge rules for automated testing triggers and workflow orchestration"
      },
      {
        "command": "aws cloudformation validate-template --template-url https://example.com/template.yaml --output json 2>/dev/null || echo '{\"Error\": \"No template provided for validation\"}'",
        "note": "Check CloudFormation template validation capabilities for Infrastructure as Code testing"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Validate container registries for automated container scanning and testing integration"
      },
      {
        "command": "aws config describe-config-rules --output json",
        "note": "Check Config rules for automated compliance testing and validation before deployment"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Validate Service Catalog for pre-tested and approved deployment templates"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check enterprise-wide testing policies and organizational validation standards"
      },
      {
        "command": "aws codebuild batch-get-builds --ids $(aws codebuild list-builds-for-project --project-name $(aws codebuild list-projects --query 'projects[0]' --output text) --query 'ids[0]' --output text) --query 'builds[0].phases[?phaseType==`TEST`]' --output json 2>/dev/null || echo '{\"testPhases\": []}'",
        "note": "Validate actual test execution phases in CodeBuild for automated testing verification"
      },
      {
        "command": "aws codebuild batch-get-build-batches --ids $(aws codebuild list-build-batches --query 'ids[0]' --output text) --query 'buildBatches[0].buildGroups[0].currentBuildSummary.buildStatus' --output json 2>/dev/null || echo '{\"buildStatus\": \"NOT_FOUND\"}'",
        "note": "Check build batch status for comprehensive testing validation"
      },
      {
        "command": "aws codepipeline get-pipeline-execution --pipeline-name $(aws codepipeline list-pipelines --query 'pipelines[0].name' --output text) --pipeline-execution-id $(aws codepipeline list-pipeline-executions --pipeline-name $(aws codepipeline list-pipelines --query 'pipelines[0].name' --output text) --query 'pipelineExecutionSummaries[0].pipelineExecutionId' --output text) --query 'pipelineExecution.artifactRevisions[0].revisionId' --output json 2>/dev/null || echo '{\"revisionId\": \"NOT_FOUND\"}'",
        "note": "Validate pipeline execution artifacts for automated testing proof"
      },
      {
        "command": "aws ecr describe-image-scan-findings --repository-name $(aws ecr describe-repositories --query 'repositories[0].repositoryName' --output text) --image-id imageTag=latest --query 'imageScanFindings.findingCounts' --output json 2>/dev/null || echo '{\"findingCounts\": {}}'",
        "note": "Check container image security scan results for testing integration"
      }
    ]
  },
  "KSI-CMT-04": {
    "description": "Have a documented change management procedure",
    "justification": "Manual evidence required - comprehensive change management procedures, approval workflows, and governance documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-CMT-04/ for change_management_policy.pdf, approval_workflow_documentation.pdf, change_control_procedures.pdf, and governance_framework.pdf"
      }
    ]
  },
  "KSI-CMT-05": {
    "description": "Evaluate the risk and potential impact of any change",
    "justification": "Manual evidence required - risk assessment procedures, impact analysis documentation, and change evaluation frameworks",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-CMT-05/ for risk_assessment_procedures.pdf, change_impact_analysis_template.xlsx, risk_evaluation_framework.pdf, and change_approval_matrix.pdf"
      }
    ]
  },
  "KSI-PIY-01": {
    "description": "Establish and maintain complete inventories of all information resources",
    "justification": "Comprehensive AWS resource discovery through native APIs provides real-time automated inventory validation PLUS automated inventory management through Lambda-based daily scanning and auditable S3 storage",
    "cli_commands": [
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "EC2 compute instance inventory with state and configuration details"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "RDS database instance inventory with configuration and backup settings"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Lambda serverless function inventory with runtime and configuration details"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "S3 storage bucket inventory for data storage resources"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Load balancer inventory for traffic distribution resources"
      },
      {
        "command": "aws route53 list-hosted-zones --output json",
        "note": "DNS zone inventory for domain and routing resources"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Infrastructure as Code stack inventory for managed resource collections"
      },
      {
        "command": "aws s3 ls s3://mksfr-sftp-bucket/inventory/",
        "note": "Validate automated inventory file generation frequency and availability via daily Lambda scanning"
      },
      {
        "command": "aws lambda get-function --function-name aws_inventory --output json 2>/dev/null || aws lambda list-functions --query 'Functions[?contains(FunctionName, `inventory`) || contains(FunctionName, `scanner`)]' --output json",
        "note": "Verify automated inventory scanning Lambda function configuration and automation capability"
      },
      {
        "command": "LATEST_FILE=$(aws s3 ls s3://mksfr-sftp-bucket/inventory/ --recursive | grep 'inventory_.*\\.csv' | sort -k1,2 | tail -n1 | awk '{print $4}'); if [ -n \"$LATEST_FILE\" ]; then aws s3 cp s3://mksfr-sftp-bucket/$LATEST_FILE /tmp/current_inventory.csv --only-show-errors && echo '{\"inventory_download\": \"success\", \"file\": \"'$(basename $LATEST_FILE)'\"}' || echo '{\"inventory_download\": \"failed\", \"reason\": \"download_error\"}'; else echo '{\"inventory_download\": \"failed\", \"reason\": \"no_inventory_files\"}'; fi",
        "note": "Download most recent automated inventory CSV file from daily Lambda automation with proper fallback handling"
      },
      {
        "command": "aws config describe-configuration-recorders --output json 2>/dev/null || echo '{\"ConfigurationRecorders\": []}'",
        "note": "Check if Config service is enabled before attempting resource discovery"
      },
      {
        "command": "if aws config describe-configuration-recorders --output json 2>/dev/null | grep -q '\"Name\"'; then aws config list-discovered-resources --resource-type AWS::S3::Bucket --query 'resourceIdentifiers[*].[resourceType,resourceId,resourceName]' --output json; else echo '{\"resourceIdentifiers\": [], \"note\": \"Config service not enabled\"}'; fi",
        "note": "Config service comprehensive S3 bucket discovery for cross-validation (if Config enabled)"
      },
      {
        "command": "if aws config describe-configuration-recorders --output json 2>/dev/null | grep -q '\"Name\"'; then aws config list-discovered-resources --resource-type AWS::Lambda::Function --query 'resourceIdentifiers[*].[resourceType,resourceId,resourceName]' --output json; else echo '{\"resourceIdentifiers\": [], \"note\": \"Config service not enabled\"}'; fi",
        "note": "Config service comprehensive Lambda function discovery for automated inventory validation (if Config enabled)"
      },
      {
        "command": "aws s3api list-objects-v2 --bucket mksfr-sftp-bucket --prefix inventory/ --query 'sort_by(Contents[?ends_with(Key, `.csv`)], &LastModified)[-1]' --output json",
        "note": "Get metadata of most recent inventory CSV file to validate daily automation freshness"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "List all EventBridge rules to identify automation scheduling (may use different naming patterns)"
      },
      {
        "command": "aws logs filter-log-events --log-group-name '/aws/lambda/aws_inventory' --start-time $(date -d '7 days ago' +%s)000 --filter-pattern 'SUCCESS' --max-items 5 --output json 2>/dev/null || echo '{\"events\": [], \"note\": \"Log group not found or no recent events\"}'",
        "note": "Validate recent successful inventory automation executions via Lambda logs"
      }
    ]
  },
  "KSI-PIY-02": {
    "description": "Establish and maintain organization-wide information security and technology policies",
    "justification": "Manual evidence required - organizational security policies, technology governance frameworks, and policy maintenance procedures",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-02/ for information_security_policy.pdf, technology_governance_framework.pdf, policy_maintenance_procedures.pdf, and organizational_security_standards.pdf"
      }
    ]
  },
  "KSI-PIY-03": {
    "description": "Maintain a vulnerability disclosure program",
    "justification": "Manual evidence required - vulnerability disclosure policy, reporting procedures, and responsible disclosure documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-03/ for vulnerability_disclosure_policy.pdf, responsible_disclosure_procedures.pdf, security_contact_information.pdf, and vulnerability_reporting_guidelines.pdf"
      }
    ]
  },
  "KSI-PIY-04": {
    "description": "Build security considerations into SDLC and align with CISA Secure By Design principles",
    "justification": "Validates secure development lifecycle through CodeBuild security testing, pipeline security gates, and alignment with CISA Secure By Design principles",
    "cli_commands": [
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Check CodeBuild projects for security testing integration in SDLC"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Validate CodePipeline for security gates and SDLC security integration"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Check ECR repositories for container security scanning in development workflow"
      },
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-04/ for secure_sdlc_procedures.pdf, cisa_secure_by_design_alignment.pdf, security_testing_integration.pdf, and development_security_standards.pdf"
      }
    ]
  },
  "KSI-PIY-05": {
    "description": "Document methods used to evaluate information resource implementations",
    "justification": "Manual evidence required - evaluation methodologies, assessment procedures, and implementation validation documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-05/ for evaluation_methodology.pdf, implementation_assessment_procedures.pdf, validation_criteria.pdf, and resource_evaluation_framework.pdf"
      }
    ]
  },
  "KSI-PIY-06": {
    "description": "Have dedicated staff and budget for security with executive support",
    "justification": "Manual evidence required - organizational structure, budget allocation, executive support documentation, and security staffing plans",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-06/ for security_organizational_chart.pdf, security_budget_allocation.pdf, executive_security_support_memo.pdf, and security_staffing_plan.pdf"
      }
    ]
  },
  "KSI-PIY-07": {
    "description": "Document risk management decisions for software supply chain security",
    "justification": "Manual evidence required - supply chain risk assessments, vendor security evaluations, and risk management decision documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-PIY-07/ for supply_chain_risk_assessment.pdf, vendor_security_evaluations.xlsx, risk_management_decisions.pdf, and software_supply_chain_policy.pdf"
      }
    ]
  },
  "KSI-TPR-01": {
    "description": "Identify all third-party information resources",
    "justification": "AWS API discovery of external integrations, identity providers, and cross-account relationships provides comprehensive third-party resource identification",
    "cli_commands": [
      {
        "command": "aws iam list-saml-providers --output json",
        "note": "SAML identity providers indicating external authentication integrations"
      },
      {
        "command": "aws iam list-open-id-connect-providers --output json",
        "note": "OIDC providers for modern OAuth2/OpenID Connect integrations"
      },
      {
        "command": "aws organizations list-accounts --output json",
        "note": "AWS organization accounts to identify multi-account third-party relationships"
      },
      {
        "command": "aws iam list-roles --query 'Roles[?contains(AssumeRolePolicyDocument, `sts:AssumeRole`)]' --output json",
        "note": "Cross-account IAM roles indicating external account trust relationships"
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=AssumeRole --start-time 2024-08-01 --end-time 2024-09-01 --max-items 20 --output json",
        "note": "Recent cross-account access events to identify active third-party integrations"
      },
      {
        "command": "aws apigateway get-rest-apis --output json",
        "note": "API Gateway endpoints that may expose services to third parties"
      }
    ]
  },
  "KSI-TPR-02": {
    "description": "Regularly confirm that services handling federal information or are likely to impact the confidentiality, integrity, or availability of federal information are FedRAMP authorized and securely configured",
    "justification": "Validates FedRAMP authorization verification through service assessment, compliance monitoring, and authorization status tracking",
    "cli_commands": [
      {
        "command": "aws organizations list-accounts --output json",
        "note": "Check organizational structure for FedRAMP authorized service boundaries"
      },
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-TPR-02/ for fedramp_authorization_verification.xlsx, service_authorization_status.pdf, compliance_monitoring_procedures.pdf, and federal_data_handling_matrix.pdf"
      }
    ]
  },
  "KSI-TPR-03": {
    "description": "Identify and prioritize mitigation of potential supply chain risks",
    "justification": "Manual evidence required - supply chain risk identification, risk prioritization matrices, and mitigation strategy documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-TPR-03/ for supply_chain_risk_register.xlsx, risk_prioritization_matrix.pdf, mitigation_strategies.pdf, and vendor_risk_assessments.pdf"
      }
    ]
  },
  "KSI-TPR-04": {
    "description": "Monitor third party software for upstream vulnerabilities",
    "justification": "AWS Inspector and ECR vulnerability scanning provides automated monitoring of third-party software components and container images",
    "cli_commands": [
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Inspector configuration status for automated vulnerability scanning"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"findingStatus\":[{\"value\":\"ACTIVE\",\"comparison\":\"EQUALS\"}]}' --max-results 50 --output json",
        "note": "Active vulnerability findings from automated scanning"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"componentType\":[{\"value\":\"NPM\",\"comparison\":\"EQUALS\"}]}' --max-results 20 --output json",
        "note": "NPM package vulnerabilities in third-party JavaScript dependencies"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"componentType\":[{\"value\":\"PYTHON_PKG\",\"comparison\":\"EQUALS\"}]}' --max-results 20 --output json",
        "note": "Python package vulnerabilities in third-party Python dependencies"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "ECR repositories for container image vulnerability scanning"
      },
      {
        "command": "aws ecr describe-image-scan-findings --repository-name $(aws ecr describe-repositories --query 'repositories[0].repositoryName' --output text) --image-id imageTag=latest --output json 2>/dev/null || echo '{\"imageScanFindings\":{\"findings\":[]}}'",
        "note": "Container image vulnerability scan findings for third-party components"
      }
    ]
  },
  "KSI-CED-01": {
    "description": "Ensure all employees receive security awareness training",
    "justification": "Manual evidence required - security awareness training programs, completion tracking, and employee training documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-CED-01/ for security_awareness_training_program.pdf, employee_training_completion_tracking.xlsx, training_materials.pdf, and annual_security_training_plan.pdf"
      }
    ]
  },
  "KSI-CED-02": {
    "description": "Require role-specific training for high risk roles, including at least roles with privileged access",
    "justification": "Manual evidence required - role-specific training programs, privileged access training requirements, and specialized security training documentation",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-CED-02/ for role_specific_training_matrix.xlsx, privileged_access_training_program.pdf, high_risk_role_training_requirements.pdf, and specialized_security_training_records.xlsx"
      }
    ]
  },
  "KSI-CED-03": {
    "description": "Require role-specific training for development and engineering staff covering best practices for delivering secure software",
    "justification": "Validates developer security training programs through automated tracking systems and evidence documentation, covering secure coding practices, SDLC security integration, training completion records, and role-specific curricula with automated compliance tracking",
    "cli_commands": [
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check for training-related automation and developer security functions"
      },
      {
        "command": "evidence_check",
        "note": "Developer training documentation, secure coding curricula, SDLC security training materials, and completion records"
      }
    ]
  },
  "KSI-RPL-01": {
    "description": "Define Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO)",
    "justification": "Validates documented RTO/RPO definitions with technical infrastructure capability verification through RDS backup retention, point-in-time recovery settings, and backup plan frequency alignment with recovery objectives",
    "cli_commands": [
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,BackupRetentionPeriod,PreferredBackupWindow]' --output json",
        "note": "Check RDS backup retention periods alignment with defined RPO requirements"
      },
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validate backup plan frequency and retention alignment with RTO/RPO definitions"
      },

      {
        "command": "aws ssm get-parameter --name '/backup/rto-objectives' --query 'Parameter.Value' --output text 2>/dev/null || echo 'RTO: 4 hours (default)'",
        "note": "Retrieve defined Recovery Time Objectives from Systems Manager parameters"
      },
      {
        "command": "aws ssm get-parameter --name '/backup/rpo-objectives' --query 'Parameter.Value' --output text 2>/dev/null || echo 'RPO: 1 hour (default)'",
        "note": "Retrieve defined Recovery Point Objectives from Systems Manager parameters"  
      },
      {
        "command": "aws backup describe-backup-vault --backup-vault-name default --query '[BackupVaultName,CreationDate,NumberOfRecoveryPoints]' --output json 2>/dev/null || aws backup list-backup-vaults --query 'BackupVaultList[0].[BackupVaultName,CreationDate,NumberOfRecoveryPoints]' --output json",
        "note": "Validate backup vault configuration for RTO/RPO compliance"
      },
      {
        "command": "aws backup list-backup-selections --backup-plan-id $(aws backup list-backup-plans --query 'BackupPlansList[0].BackupPlanId' --output text) --query 'BackupSelectionsList[*].[SelectionName,IamRoleArn,CreationDate]' --output json 2>/dev/null || echo '{\"BackupSelections\": []}'",
        "note": "Check backup selection configuration for comprehensive recovery coverage"
      }      
    ]
  },
  "KSI-RPL-02": {
    "description": "Develop and maintain a recovery plan that aligns with defined recovery objectives",
    "justification": "Manual evidence required - comprehensive recovery plans, playbooks, and alignment documentation with defined RTO/RPO",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-RPL-02/ for disaster_recovery_plan.pdf, recovery_playbooks.pdf, rto_rpo_alignment_matrix.xlsx, and recovery_plan_maintenance_log.pdf"
      }
    ]
  },
  "KSI-RPL-03": {
    "description": "Perform system backups aligned with recovery objectives",
    "justification": "Validates automated backup systems, retention policies, and backup job performance through AWS Backup service configuration and monitoring",
    "cli_commands": [
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Verify comprehensive backup plans are configured for system recovery"
      },
      {
        "command": "aws backup list-backup-jobs --by-state COMPLETED --max-results 50 --output json",
        "note": "Check recent backup job completions and success rates"
      },
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,BackupRetentionPeriod,DeletionProtection]' --output json",
        "note": "Confirm RDS automated backup configuration and data protection settings"
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --output json",
        "note": "Validate EBS snapshots for system backup coverage"
      }
    ]
  },
  "KSI-RPL-04": {
    "description": "Regularly test the capability to recover from incidents and contingencies",
    "justification": "Validates recovery testing through historical restore operations, backup job performance metrics, and documented test procedures with actual results",
    "cli_commands": [
      {
        "command": "aws backup list-restore-jobs --max-results 20 --output json",
        "note": "Document historical restore operations proving actual recovery testing has been performed"
      },
      {
        "command": "aws backup list-backup-jobs --by-state COMPLETED --by-created-after 2024-05-01 --output json",
        "note": "Show recent backup completions with timing data to validate recovery time objectives"
      },
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,LatestRestorableTime,PreferredBackupWindow]' --output json",
        "note": "Verify point-in-time recovery capability and backup timing for recovery testing validation"
      },
      {
        "command": "aws backup describe-restore-job --restore-job-id $(aws backup list-restore-jobs --query 'RestoreJobs[0].RestoreJobId' --output text) --query '[Status,CreationDate,CompletionDate,RecoveryPointArn]' --output json 2>/dev/null || echo '{\"RestoreJobStatus\": \"NOT_FOUND\"}'",
        "note": "Analyze most recent restore job performance for recovery testing validation"
      },
      {
        "command": "aws ssm describe-instance-associations --instance-id $(aws ec2 describe-instances --filters 'Name=tag:Environment,Values=test' --query 'Reservations[0].Instances[0].InstanceId' --output text) --query 'Associations[*].[Name,AssociationId,Status.Name,LastExecutionDate]' --output json 2>/dev/null || echo '{\"Associations\": []}'",
        "note": "Check Systems Manager associations for automated recovery testing scripts"
      },
      {
        "command": "aws lambda invoke --function-name automated-recovery-test --payload '{\"test_type\":\"backup_restore\"}' /tmp/response.json --query 'StatusCode' --output text 2>/dev/null && cat /tmp/response.json 2>/dev/null || echo '{\"error\": \"Recovery test function not configured\"}'", 
        "note": "Execute automated recovery test function and retrieve results"
      },
      {
        "command": "aws ssm get-parameter --name '/recovery/last-test-date' --query 'Parameter.[Value,LastModifiedDate]' --output json 2>/dev/null || echo '{\"LastTest\": \"No automated testing configured\"}'",
        "note": "Check last recovery test execution date for regular testing compliance"
      }
    ]
  },
  "KSI-INR-01": {
    "description": "Document, report, and analyze security incidents to ensure regulatory compliance and continuous security improvement",
    "justification": "Manual evidence required - incident documentation, reporting procedures, analysis frameworks, and regulatory compliance processes",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-INR-01/ for incident_documentation_procedures.pdf, fedramp_incident_reporting_policy.pdf, incident_analysis_framework.pdf, regulatory_compliance_procedures.pdf, and continuous_improvement_process.pdf"
      }
    ]
  },
  "KSI-INR-02": {
    "description": "Maintain a log of incidents and periodically review past incidents for patterns or vulnerabilities",
    "justification": "Validates incident tracking through CloudTrail integration, EventBridge logs, and manual evidence of incident database with pattern analysis",
    "cli_commands": [
      {
        "command": "aws events list-rules --output json",
        "note": "Check automated incident detection and logging rules"
      },
      {
        "command": "aws logs describe-log-groups --log-group-name-prefix '/aws/events/' --output json",
        "note": "Validate incident logging infrastructure in CloudWatch"
      },
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-INR-02/ for incident_database.xlsx, incident_pattern_analysis_report.pdf, and quarterly_incident_review_minutes.pdf"
      }
    ]
  },
  "KSI-INR-03": {
    "description": "Generate after action reports and regularly incorporate lessons learned into operations",
    "justification": "Manual evidence required - after action reports, lessons learned documentation, and process improvement records",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Check evidence_v2/KSI-INR-03/ for after_action_reports_2024.pdf, lessons_learned_implementation_log.xlsx, process_improvement_tracking.pdf, and incident_response_plan_updates.pdf"
      }
    ]
  }
}





